package com.ericsson.mssp.common.entity;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;


import javax.persistence.CascadeType;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Solution generated by hbm2java
 */
@Entity
@Table(name = "Solution")
public class Solution implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7228672710833782973L;
	private Integer solutionId;
	private Status status;
	private Opportunity opportunity;
	private Date createdDate;
	private String createdBy;
	private Date updatedDate;
	private String updatedBy;
	
	private String solutionApproach;
	private String solutionType;
	private String jobRoleModel;
	private String stepCompleted;
	private Integer solutionVersion;
	
	private String utilizationPerYear;
	
	private Set<SolutionLever> solutionLevers = new HashSet<SolutionLever>(0);
	private Set<FTEStaging> ftestagings = new HashSet<FTEStaging>(0);
	private Set<SolutionComplexity> solutionComplexities = new HashSet<SolutionComplexity>(0);
	private Set<SolutionApproachDimension> solutionApproachDimensions = new HashSet<SolutionApproachDimension>(0);
	private Set<SolutionADR> solutionAdrs = new HashSet<SolutionADR>(0);
	private Set<NonLabourCost> nonLabourCosts = new HashSet<NonLabourCost>(0);
	private Set<AdditionalFTE> additionalFtes = new HashSet<AdditionalFTE>(0);
	private Set<StaffingPlan> staffingPlans = new HashSet<StaffingPlan>(0);
	private Set<SolutionAPA> solutionApas = new HashSet<SolutionAPA>(0);

	public Solution() {
	}

	public Solution(Status status, Opportunity opportunity) {
		this.status = status;
		this.opportunity = opportunity;
	}

	public Solution(Status status, Opportunity opportunity,
			Date createdDate, String createdBy,Date updatedDate, String updatedBy, String solutionApproach,
			String solutionType, String stepCompleted, Integer solutionVersion,
			Set<SolutionLever> solutionLevers, Set<FTEStaging> ftestagings, 
			Set<SolutionComplexity> solutionComplexities, Set<SolutionApproachDimension> solutionApproachDimensions,
			Set<SolutionADR> solutionAdrs, Set<NonLabourCost> nonLabourCosts, Set<AdditionalFTE> additionalFtes,
			Set<StaffingPlan> staffingPlans, Set<SolutionAPA> solutionApas) {
		this.status = status;
		this.opportunity = opportunity;
		this.createdDate = createdDate;
		this.createdBy = createdBy;
		this.updatedDate = updatedDate;
		this.updatedBy = updatedBy;
		
		this.solutionApproach = solutionApproach;
		this.solutionType = solutionType;
		this.stepCompleted = stepCompleted;
		this.solutionVersion = solutionVersion;
		this.solutionLevers = solutionLevers;
		this.ftestagings = ftestagings;
		this.solutionComplexities = solutionComplexities;
		this.solutionApproachDimensions = solutionApproachDimensions;
		this.solutionAdrs = solutionAdrs;
		this.nonLabourCosts = nonLabourCosts;
		this.additionalFtes = additionalFtes;
		this.staffingPlans = staffingPlans;
		this.solutionApas = solutionApas;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name = "SolutionID")
	public Integer getSolutionId() {
		return this.solutionId;
	}

	public void setSolutionId(Integer solutionId) {
		this.solutionId = solutionId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "StatusID", nullable = false)
	public Status getStatus() {
		return this.status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "OpportunityID", nullable = false)
	public Opportunity getOpportunity() {
		return this.opportunity;
	}

	public void setOpportunity(Opportunity opportunity) {
		this.opportunity = opportunity;
	}

	/**
	 * @return the createdDate
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedDate", length = 19)
	public Date getCreatedDate() {
		return createdDate;
	}

	/**
	 * @param createdDate the createdDate to set
	 */
	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	/**
	 * @return the createdBy
	 */
	@Column(name = "CreatedBy", length = 10)
	public String getCreatedBy() {
		return createdBy;
	}

	/**
	 * @param createdBy the createdBy to set
	 */
	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	/**
	 * @return the updatedDate
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UpdatedDate", length = 19)
	public Date getUpdatedDate() {
		return updatedDate;
	}

	/**
	 * @param updatedDate the updatedDate to set
	 */
	public void setUpdatedDate(Date updatedDate) {
		this.updatedDate = updatedDate;
	}

	/**
	 * @return the updatedBy
	 */
	@Column(name = "UpdatedBy", length = 10)
	public String getUpdatedBy() {
		return updatedBy;
	}

	/**
	 * @param updatedBy the updatedBy to set
	 */
	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Column(name = "SolutionApproach", length = 50)
	public String getSolutionApproach() {
		return this.solutionApproach;
	}

	public void setSolutionApproach(String solutionApproach) {
		this.solutionApproach = solutionApproach;
	}

	@Column(name = "SolutionType", length = 50)
	public String getSolutionType() {
		return this.solutionType;
	}

	public void setSolutionType(String solutionType) {
		this.solutionType = solutionType;
	}
	
	@Column(name = "JobRoleModel", length = 20)
	public String getJobRoleModel() {
		return jobRoleModel;
	}

	public void setJobRoleModel(String jobRoleModel) {
		this.jobRoleModel = jobRoleModel;
	}
	

	@Column(name = "StepCompleted", length = 50)
	public String getStepCompleted() {
		return this.stepCompleted;
	}

	public void setStepCompleted(String stepCompleted) {
		this.stepCompleted = stepCompleted;
	}

	@Column(name = "SolutionVersion")
	public Integer getSolutionVersion() {
		return this.solutionVersion;
	}

	public void setSolutionVersion(Integer solutionVersion) {
		this.solutionVersion = solutionVersion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solution")
	public Set<SolutionLever> getSolutionLevers() {
		return this.solutionLevers;
	}

	public void setSolutionLevers(Set<SolutionLever> solutionLevers) {
		this.solutionLevers = solutionLevers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solution")
	public Set<FTEStaging> getFtestagings() {
		return this.ftestagings;
	}

	public void setFtestagings(Set<FTEStaging> ftestagings) {
		this.ftestagings = ftestagings;
	}

	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solution")
	public Set<SolutionComplexity> getSolutionComplexities() {
		return this.solutionComplexities;
	}

	public void setSolutionComplexities(Set<SolutionComplexity> solutionComplexities) {
		this.solutionComplexities = solutionComplexities;
	}

	@OneToMany(cascade=CascadeType.ALL,fetch = FetchType.EAGER)
	@JoinColumn(name = "SolutionID",referencedColumnName="SolutionID" ,nullable = false)
	public Set<SolutionApproachDimension> getSolutionApproachDimensions() {
		return this.solutionApproachDimensions;
	}

	public void setSolutionApproachDimensions(Set<SolutionApproachDimension> solutionApproachDimensions) {
		this.solutionApproachDimensions = solutionApproachDimensions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solution")
	public Set<SolutionADR> getSolutionAdrs() {
		return this.solutionAdrs;
	}

	public void setSolutionAdrs(Set<SolutionADR> solutionAdrs) {
		this.solutionAdrs = solutionAdrs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solution")
	public Set<NonLabourCost> getNonLabourCosts() {
		return this.nonLabourCosts;
	}

	public void setNonLabourCosts(Set<NonLabourCost> nonLabourCosts) {
		this.nonLabourCosts = nonLabourCosts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solution")
	public Set<AdditionalFTE> getAdditionalFtes() {
		return this.additionalFtes;
	}

	public void setAdditionalFtes(Set<AdditionalFTE> additionalFtes) {
		this.additionalFtes = additionalFtes;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "solution")
	public Set<StaffingPlan> getStaffingPlans() {
		return this.staffingPlans;
	}

	public void setStaffingPlans(Set<StaffingPlan> staffingPlans) {
		this.staffingPlans = staffingPlans;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solution" )
	public Set<SolutionAPA> getSolutionApas() {
		return this.solutionApas;
	}

	public void setSolutionApas(Set<SolutionAPA> solutionApas) {
		this.solutionApas = solutionApas;
	}

	/**
	 * @return the utilizationPerYear
	 */
	@Column(name = "UtilizationPerYear", length = 20)
	public String getUtilizationPerYear() {
		return utilizationPerYear;
	}

	/**
	 * @param utilizationPerYear the utilizationPerYear to set
	 */
	public void setUtilizationPerYear(String utilizationPerYear) {
		this.utilizationPerYear = utilizationPerYear;
	}

	

}
